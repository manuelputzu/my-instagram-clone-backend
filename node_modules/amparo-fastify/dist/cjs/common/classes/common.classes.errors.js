"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InternalServerError = exports.BadRequestError = exports.ConflictError = exports.ForbiddenError = exports.AuthorizationError = exports.AuthenticationError = exports.DuplicateKeyError = exports.CastError = exports.NotFoundError = exports.ValidationError = exports.CustomError = void 0;
const http_status_codes_1 = require("http-status-codes");
class CustomError extends Error {
    constructor(message, status, name, cause) {
        super(message);
        this.status = status;
        this.name = name;
        Error.captureStackTrace(this, this.constructor);
        if (cause) {
            this.cause = cause;
        }
    }
}
exports.CustomError = CustomError;
class ValidationError extends CustomError {
    constructor(message, originalError) {
        super(message || "The input is not valid.", http_status_codes_1.StatusCodes.BAD_REQUEST, "validationerror" /* ErrorName.validation */, originalError);
    }
}
exports.ValidationError = ValidationError;
class NotFoundError extends CustomError {
    constructor(message, originalError) {
        super(message || "The requested resource was not found.", http_status_codes_1.StatusCodes.NOT_FOUND, "notfounderror" /* ErrorName.notFound */, originalError);
    }
}
exports.NotFoundError = NotFoundError;
class CastError extends CustomError {
    constructor(message, originalError) {
        super(message || "Type casting error. ", http_status_codes_1.StatusCodes.BAD_REQUEST, "casterror" /* ErrorName.cast */, originalError);
    }
}
exports.CastError = CastError;
class DuplicateKeyError extends CustomError {
    constructor(message, originalError) {
        super(message || "A resource with that identifier already exists.", http_status_codes_1.StatusCodes.BAD_REQUEST, "badrequesterror" /* ErrorName.badRequest */, originalError);
    }
}
exports.DuplicateKeyError = DuplicateKeyError;
class AuthenticationError extends CustomError {
    constructor(message, originalError) {
        super(message || "Authentication failed.", http_status_codes_1.StatusCodes.UNAUTHORIZED, "authenticationerror" /* ErrorName.authentication */, originalError);
    }
}
exports.AuthenticationError = AuthenticationError;
class AuthorizationError extends CustomError {
    constructor(message, originalError) {
        super(message || "This action requires authorizaion.", http_status_codes_1.StatusCodes.UNAUTHORIZED, "authorizationerror" /* ErrorName.authorization */, originalError);
    }
}
exports.AuthorizationError = AuthorizationError;
class ForbiddenError extends CustomError {
    constructor(message, originalError) {
        super(message ||
            "You don't have the neccesary permissions to perfom this action.", http_status_codes_1.StatusCodes.FORBIDDEN, "forbiddenerror" /* ErrorName.forbidden */, originalError);
    }
}
exports.ForbiddenError = ForbiddenError;
class ConflictError extends CustomError {
    constructor(message, originalError) {
        super(message || "A conflict occurred.", http_status_codes_1.StatusCodes.CONFLICT, "conflicterror" /* ErrorName.conflict */, originalError);
    }
}
exports.ConflictError = ConflictError;
class BadRequestError extends CustomError {
    constructor(message, originalError) {
        super(message || "Bad request.", http_status_codes_1.StatusCodes.BAD_REQUEST, "badrequesterror" /* ErrorName.badRequest */, originalError);
    }
}
exports.BadRequestError = BadRequestError;
class InternalServerError extends CustomError {
    constructor(message, originalError) {
        super(message || "An unexpected server error occurred.", http_status_codes_1.StatusCodes.INTERNAL_SERVER_ERROR, "internalservererror" /* ErrorName.internalServerError */, originalError);
    }
}
exports.InternalServerError = InternalServerError;
//# sourceMappingURL=common.classes.errors.js.map
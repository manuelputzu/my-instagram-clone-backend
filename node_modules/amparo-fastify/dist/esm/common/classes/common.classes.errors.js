import { StatusCodes } from "http-status-codes";
class CustomError extends Error {
    constructor(message, status, name, cause) {
        super(message);
        this.status = status;
        this.name = name;
        Error.captureStackTrace(this, this.constructor);
        if (cause) {
            this.cause = cause;
        }
    }
}
class ValidationError extends CustomError {
    constructor(message, originalError) {
        super(message || "The input is not valid.", StatusCodes.BAD_REQUEST, "validationerror" /* ErrorName.validation */, originalError);
    }
}
class NotFoundError extends CustomError {
    constructor(message, originalError) {
        super(message || "The requested resource was not found.", StatusCodes.NOT_FOUND, "notfounderror" /* ErrorName.notFound */, originalError);
    }
}
class CastError extends CustomError {
    constructor(message, originalError) {
        super(message || "Type casting error. ", StatusCodes.BAD_REQUEST, "casterror" /* ErrorName.cast */, originalError);
    }
}
class DuplicateKeyError extends CustomError {
    constructor(message, originalError) {
        super(message || "A resource with that identifier already exists.", StatusCodes.BAD_REQUEST, "badrequesterror" /* ErrorName.badRequest */, originalError);
    }
}
class AuthenticationError extends CustomError {
    constructor(message, originalError) {
        super(message || "Authentication failed.", StatusCodes.UNAUTHORIZED, "authenticationerror" /* ErrorName.authentication */, originalError);
    }
}
class AuthorizationError extends CustomError {
    constructor(message, originalError) {
        super(message || "This action requires authorizaion.", StatusCodes.UNAUTHORIZED, "authorizationerror" /* ErrorName.authorization */, originalError);
    }
}
class ForbiddenError extends CustomError {
    constructor(message, originalError) {
        super(message ||
            "You don't have the neccesary permissions to perfom this action.", StatusCodes.FORBIDDEN, "forbiddenerror" /* ErrorName.forbidden */, originalError);
    }
}
class ConflictError extends CustomError {
    constructor(message, originalError) {
        super(message || "A conflict occurred.", StatusCodes.CONFLICT, "conflicterror" /* ErrorName.conflict */, originalError);
    }
}
class BadRequestError extends CustomError {
    constructor(message, originalError) {
        super(message || "Bad request.", StatusCodes.BAD_REQUEST, "badrequesterror" /* ErrorName.badRequest */, originalError);
    }
}
class InternalServerError extends CustomError {
    constructor(message, originalError) {
        super(message || "An unexpected server error occurred.", StatusCodes.INTERNAL_SERVER_ERROR, "internalservererror" /* ErrorName.internalServerError */, originalError);
    }
}
export { CustomError, ValidationError, NotFoundError, CastError, DuplicateKeyError, AuthenticationError, AuthorizationError, ForbiddenError, ConflictError, BadRequestError, InternalServerError, };
//# sourceMappingURL=common.classes.errors.js.map
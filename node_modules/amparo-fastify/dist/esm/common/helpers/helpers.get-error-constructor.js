import { ValidationError, NotFoundError, CastError, DuplicateKeyError, AuthenticationError, AuthorizationError, ForbiddenError, InternalServerError, ConflictError, BadRequestError, } from "../classes/common.classes.errors";
import { assertUnreachable } from "../utils/common.utils.assert-unreachable";
function getErrorConstructor(errorName) {
    switch (errorName) {
        case "validationerror" /* ErrorName.validation */: {
            return ValidationError;
        }
        case "notfounderror" /* ErrorName.notFound */: {
            return NotFoundError;
        }
        case "casterror" /* ErrorName.cast */: {
            return CastError;
        }
        case "duplicatekeyerror" /* ErrorName.duplicatekey */: {
            return DuplicateKeyError;
        }
        case "authenticationerror" /* ErrorName.authentication */: {
            return AuthenticationError;
        }
        case "authorizationerror" /* ErrorName.authorization */: {
            return AuthorizationError;
        }
        case "forbiddenerror" /* ErrorName.forbidden */: {
            return ForbiddenError;
        }
        case "conflicterror" /* ErrorName.conflict */: {
            return ConflictError;
        }
        case "badrequesterror" /* ErrorName.badRequest */: {
            return BadRequestError;
        }
        case "internalservererror" /* ErrorName.internalServerError */: {
            return InternalServerError;
        }
        default: {
            return assertUnreachable(errorName, `Unknown error name provided`);
        }
    }
}
export default getErrorConstructor;
//# sourceMappingURL=helpers.get-error-constructor.js.map
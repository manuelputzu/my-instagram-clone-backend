import fp from "fastify-plugin";
import { assert } from "../../core/core.assert";
import cookie from "@fastify/cookie";
import { safe } from "../../core";
var AuthenticationMethod;
(function (AuthenticationMethod) {
    AuthenticationMethod["cookieJwt"] = "cookieJwt";
    AuthenticationMethod["xApiKey"] = "xApiKey";
    AuthenticationMethod["emailPassword"] = "emailPassword";
})(AuthenticationMethod || (AuthenticationMethod = {}));
const authPlugin = fp(async (fastify, config) => {
    fastify.decorateRequest("_user");
    fastify.register(cookie);
    const authenticate = async (request) => {
        const { authenticationMethod, authenticationMethodValue } = assert((() => {
            const apiKey = Array.isArray(request.headers["x-api-key"])
                ? request.headers["x-api-key"][0]
                : request.headers["x-api-key"];
            if (apiKey) {
                return {
                    authenticationMethod: "xApiKey" /* AuthenticationMethod.xApiKey */,
                    authenticationMethodValue: apiKey,
                };
            }
            const jwtCookie = request.cookies[config.getUserByAuthMethodHelperOptions?.jwtCookieName ?? "jwt"];
            if (jwtCookie) {
                return {
                    authenticationMethod: "cookieJwt" /* AuthenticationMethod.cookieJwt */,
                    authenticationMethodValue: jwtCookie,
                };
            }
            if (request.body[config.getUserByAuthMethodHelperOptions?.passwordEmailFieldNames
                ?.emailFieldName ?? "email"] &&
                request.body[config.getUserByAuthMethodHelperOptions?.passwordEmailFieldNames
                    ?.passwordFieldName ?? "password"]) {
                return {
                    authenticationMethod: "emailPassword" /* AuthenticationMethod.emailPassword */,
                    authenticationMethodValue: {
                        [config.getUserByAuthMethodHelperOptions
                            ?.passwordEmailFieldNames?.emailFieldName ?? "email"]: request.body[config.getUserByAuthMethodHelperOptions
                            ?.passwordEmailFieldNames?.emailFieldName ?? "email"],
                        [config.getUserByAuthMethodHelperOptions
                            ?.passwordEmailFieldNames?.passwordFieldName ?? "password"]: request.body[config.getUserByAuthMethodHelperOptions
                            ?.passwordEmailFieldNames?.passwordFieldName ?? "password"],
                    },
                };
            }
        })(), "No authentication method found", "authenticationerror" /* ErrorName.authentication */);
        const requestUser = await safe(config.getRequestUserByAuthMethodHelper(authenticationMethod, authenticationMethodValue, config.getUserByAuthMethodHelperOptions), "Falid to get user by auth method", "authenticationerror" /* ErrorName.authentication */);
        request._user = requestUser;
    };
    fastify.addHook("onRoute", (routeOptions) => {
        if (routeOptions.config?.authenticate) {
            const preHandler = routeOptions.preHandler;
            if (Array.isArray(preHandler)) {
                routeOptions.preHandler = [authenticate, ...preHandler];
            }
            else if (preHandler) {
                routeOptions.preHandler = [authenticate, preHandler];
            }
            else {
                routeOptions.preHandler = authenticate;
            }
        }
    });
});
export { AuthenticationMethod };
export { authPlugin };
//# sourceMappingURL=fastify.plugin.auth.js.map